import bcrypt from "bcryptjs";
import User from "../models/User.js";

// üìå ƒêƒÉng k√Ω
export const registerUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await User.create({
      name,
      email,
      password: hashedPassword,
      role: role || "user",
    });

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      user: { id: newUser._id, name: newUser.name, email: newUser.email, role: newUser.role },
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng k√Ω!", error });
  }
};

// üìå ƒêƒÉng nh·∫≠p
export const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u!" });

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      user: { id: user._id, name: user.name, email: user.email, role: user.role },
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p!", error });
  }
};

// üìå L·∫•y danh s√°ch t·∫•t c·∫£ user
export const getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch user!", error });
  }
};
